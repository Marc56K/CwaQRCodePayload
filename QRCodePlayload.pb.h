// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QRCodePlayload.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_QRCodePlayload_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_QRCodePlayload_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_QRCodePlayload_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_QRCodePlayload_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_QRCodePlayload_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_QRCodePlayload_2eproto_metadata_getter(int index);
class CWALocationData;
struct CWALocationDataDefaultTypeInternal;
extern CWALocationDataDefaultTypeInternal _CWALocationData_default_instance_;
class CrowdNotifierData;
struct CrowdNotifierDataDefaultTypeInternal;
extern CrowdNotifierDataDefaultTypeInternal _CrowdNotifierData_default_instance_;
class QRCodePayload;
struct QRCodePayloadDefaultTypeInternal;
extern QRCodePayloadDefaultTypeInternal _QRCodePayload_default_instance_;
class TraceLocation;
struct TraceLocationDefaultTypeInternal;
extern TraceLocationDefaultTypeInternal _TraceLocation_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CWALocationData* Arena::CreateMaybeMessage<::CWALocationData>(Arena*);
template<> ::CrowdNotifierData* Arena::CreateMaybeMessage<::CrowdNotifierData>(Arena*);
template<> ::QRCodePayload* Arena::CreateMaybeMessage<::QRCodePayload>(Arena*);
template<> ::TraceLocation* Arena::CreateMaybeMessage<::TraceLocation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum TraceLocationType : int {
  LOCATION_TYPE_UNSPECIFIED = 0,
  LOCATION_TYPE_PERMANENT_OTHER = 1,
  LOCATION_TYPE_TEMPORARY_OTHER = 2,
  LOCATION_TYPE_PERMANENT_RETAIL = 3,
  LOCATION_TYPE_PERMANENT_FOOD_SERVICE = 4,
  LOCATION_TYPE_PERMANENT_CRAFT = 5,
  LOCATION_TYPE_PERMANENT_WORKPLACE = 6,
  LOCATION_TYPE_PERMANENT_EDUCATIONAL_INSTITUTION = 7,
  LOCATION_TYPE_PERMANENT_PUBLIC_BUILDING = 8,
  LOCATION_TYPE_TEMPORARY_CULTURAL_EVENT = 9,
  LOCATION_TYPE_TEMPORARY_CLUB_ACTIVITY = 10,
  LOCATION_TYPE_TEMPORARY_PRIVATE_EVENT = 11,
  LOCATION_TYPE_TEMPORARY_WORSHIP_SERVICE = 12,
  TraceLocationType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TraceLocationType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TraceLocationType_IsValid(int value);
constexpr TraceLocationType TraceLocationType_MIN = LOCATION_TYPE_UNSPECIFIED;
constexpr TraceLocationType TraceLocationType_MAX = LOCATION_TYPE_TEMPORARY_WORSHIP_SERVICE;
constexpr int TraceLocationType_ARRAYSIZE = TraceLocationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TraceLocationType_descriptor();
template<typename T>
inline const std::string& TraceLocationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TraceLocationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TraceLocationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TraceLocationType_descriptor(), enum_t_value);
}
inline bool TraceLocationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TraceLocationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TraceLocationType>(
    TraceLocationType_descriptor(), name, value);
}
// ===================================================================

class QRCodePayload PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:QRCodePayload) */ {
 public:
  inline QRCodePayload() : QRCodePayload(nullptr) {}
  virtual ~QRCodePayload();
  explicit constexpr QRCodePayload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QRCodePayload(const QRCodePayload& from);
  QRCodePayload(QRCodePayload&& from) noexcept
    : QRCodePayload() {
    *this = ::std::move(from);
  }

  inline QRCodePayload& operator=(const QRCodePayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline QRCodePayload& operator=(QRCodePayload&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QRCodePayload& default_instance() {
    return *internal_default_instance();
  }
  static inline const QRCodePayload* internal_default_instance() {
    return reinterpret_cast<const QRCodePayload*>(
               &_QRCodePayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QRCodePayload& a, QRCodePayload& b) {
    a.Swap(&b);
  }
  inline void Swap(QRCodePayload* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QRCodePayload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QRCodePayload* New() const final {
    return CreateMaybeMessage<QRCodePayload>(nullptr);
  }

  QRCodePayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QRCodePayload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QRCodePayload& from);
  void MergeFrom(const QRCodePayload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QRCodePayload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QRCodePayload";
  }
  protected:
  explicit QRCodePayload(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_QRCodePlayload_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryDataFieldNumber = 4,
    kLocationDataFieldNumber = 2,
    kCrowdNotifierDataFieldNumber = 3,
    kVersionFieldNumber = 1,
  };
  // bytes countryData = 4;
  void clear_countrydata();
  const std::string& countrydata() const;
  void set_countrydata(const std::string& value);
  void set_countrydata(std::string&& value);
  void set_countrydata(const char* value);
  void set_countrydata(const void* value, size_t size);
  std::string* mutable_countrydata();
  std::string* release_countrydata();
  void set_allocated_countrydata(std::string* countrydata);
  private:
  const std::string& _internal_countrydata() const;
  void _internal_set_countrydata(const std::string& value);
  std::string* _internal_mutable_countrydata();
  public:

  // .TraceLocation locationData = 2;
  bool has_locationdata() const;
  private:
  bool _internal_has_locationdata() const;
  public:
  void clear_locationdata();
  const ::TraceLocation& locationdata() const;
  ::TraceLocation* release_locationdata();
  ::TraceLocation* mutable_locationdata();
  void set_allocated_locationdata(::TraceLocation* locationdata);
  private:
  const ::TraceLocation& _internal_locationdata() const;
  ::TraceLocation* _internal_mutable_locationdata();
  public:
  void unsafe_arena_set_allocated_locationdata(
      ::TraceLocation* locationdata);
  ::TraceLocation* unsafe_arena_release_locationdata();

  // .CrowdNotifierData crowdNotifierData = 3;
  bool has_crowdnotifierdata() const;
  private:
  bool _internal_has_crowdnotifierdata() const;
  public:
  void clear_crowdnotifierdata();
  const ::CrowdNotifierData& crowdnotifierdata() const;
  ::CrowdNotifierData* release_crowdnotifierdata();
  ::CrowdNotifierData* mutable_crowdnotifierdata();
  void set_allocated_crowdnotifierdata(::CrowdNotifierData* crowdnotifierdata);
  private:
  const ::CrowdNotifierData& _internal_crowdnotifierdata() const;
  ::CrowdNotifierData* _internal_mutable_crowdnotifierdata();
  public:
  void unsafe_arena_set_allocated_crowdnotifierdata(
      ::CrowdNotifierData* crowdnotifierdata);
  ::CrowdNotifierData* unsafe_arena_release_crowdnotifierdata();

  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:QRCodePayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr countrydata_;
  ::TraceLocation* locationdata_;
  ::CrowdNotifierData* crowdnotifierdata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_QRCodePlayload_2eproto;
};
// -------------------------------------------------------------------

class TraceLocation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TraceLocation) */ {
 public:
  inline TraceLocation() : TraceLocation(nullptr) {}
  virtual ~TraceLocation();
  explicit constexpr TraceLocation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TraceLocation(const TraceLocation& from);
  TraceLocation(TraceLocation&& from) noexcept
    : TraceLocation() {
    *this = ::std::move(from);
  }

  inline TraceLocation& operator=(const TraceLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceLocation& operator=(TraceLocation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TraceLocation& default_instance() {
    return *internal_default_instance();
  }
  static inline const TraceLocation* internal_default_instance() {
    return reinterpret_cast<const TraceLocation*>(
               &_TraceLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TraceLocation& a, TraceLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceLocation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceLocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TraceLocation* New() const final {
    return CreateMaybeMessage<TraceLocation>(nullptr);
  }

  TraceLocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TraceLocation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TraceLocation& from);
  void MergeFrom(const TraceLocation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceLocation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TraceLocation";
  }
  protected:
  explicit TraceLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_QRCodePlayload_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kAddressFieldNumber = 3,
    kStartTimestampFieldNumber = 5,
    kEndTimestampFieldNumber = 6,
    kVersionFieldNumber = 1,
  };
  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string address = 3;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint64 startTimestamp = 5;
  void clear_starttimestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 starttimestamp() const;
  void set_starttimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_starttimestamp() const;
  void _internal_set_starttimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 endTimestamp = 6;
  void clear_endtimestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 endtimestamp() const;
  void set_endtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_endtimestamp() const;
  void _internal_set_endtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TraceLocation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 starttimestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 endtimestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_QRCodePlayload_2eproto;
};
// -------------------------------------------------------------------

class CrowdNotifierData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CrowdNotifierData) */ {
 public:
  inline CrowdNotifierData() : CrowdNotifierData(nullptr) {}
  virtual ~CrowdNotifierData();
  explicit constexpr CrowdNotifierData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CrowdNotifierData(const CrowdNotifierData& from);
  CrowdNotifierData(CrowdNotifierData&& from) noexcept
    : CrowdNotifierData() {
    *this = ::std::move(from);
  }

  inline CrowdNotifierData& operator=(const CrowdNotifierData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CrowdNotifierData& operator=(CrowdNotifierData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CrowdNotifierData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CrowdNotifierData* internal_default_instance() {
    return reinterpret_cast<const CrowdNotifierData*>(
               &_CrowdNotifierData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CrowdNotifierData& a, CrowdNotifierData& b) {
    a.Swap(&b);
  }
  inline void Swap(CrowdNotifierData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CrowdNotifierData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CrowdNotifierData* New() const final {
    return CreateMaybeMessage<CrowdNotifierData>(nullptr);
  }

  CrowdNotifierData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CrowdNotifierData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CrowdNotifierData& from);
  void MergeFrom(const CrowdNotifierData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CrowdNotifierData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CrowdNotifierData";
  }
  protected:
  explicit CrowdNotifierData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_QRCodePlayload_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 2,
    kCryptographicSeedFieldNumber = 3,
    kVersionFieldNumber = 1,
    kTypeFieldNumber = 4,
  };
  // bytes publicKey = 2;
  void clear_publickey();
  const std::string& publickey() const;
  void set_publickey(const std::string& value);
  void set_publickey(std::string&& value);
  void set_publickey(const char* value);
  void set_publickey(const void* value, size_t size);
  std::string* mutable_publickey();
  std::string* release_publickey();
  void set_allocated_publickey(std::string* publickey);
  private:
  const std::string& _internal_publickey() const;
  void _internal_set_publickey(const std::string& value);
  std::string* _internal_mutable_publickey();
  public:

  // bytes cryptographicSeed = 3;
  void clear_cryptographicseed();
  const std::string& cryptographicseed() const;
  void set_cryptographicseed(const std::string& value);
  void set_cryptographicseed(std::string&& value);
  void set_cryptographicseed(const char* value);
  void set_cryptographicseed(const void* value, size_t size);
  std::string* mutable_cryptographicseed();
  std::string* release_cryptographicseed();
  void set_allocated_cryptographicseed(std::string* cryptographicseed);
  private:
  const std::string& _internal_cryptographicseed() const;
  void _internal_set_cryptographicseed(const std::string& value);
  std::string* _internal_mutable_cryptographicseed();
  public:

  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 type = 4;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CrowdNotifierData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr publickey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cryptographicseed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_QRCodePlayload_2eproto;
};
// -------------------------------------------------------------------

class CWALocationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CWALocationData) */ {
 public:
  inline CWALocationData() : CWALocationData(nullptr) {}
  virtual ~CWALocationData();
  explicit constexpr CWALocationData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CWALocationData(const CWALocationData& from);
  CWALocationData(CWALocationData&& from) noexcept
    : CWALocationData() {
    *this = ::std::move(from);
  }

  inline CWALocationData& operator=(const CWALocationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CWALocationData& operator=(CWALocationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CWALocationData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CWALocationData* internal_default_instance() {
    return reinterpret_cast<const CWALocationData*>(
               &_CWALocationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CWALocationData& a, CWALocationData& b) {
    a.Swap(&b);
  }
  inline void Swap(CWALocationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CWALocationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CWALocationData* New() const final {
    return CreateMaybeMessage<CWALocationData>(nullptr);
  }

  CWALocationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CWALocationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CWALocationData& from);
  void MergeFrom(const CWALocationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CWALocationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CWALocationData";
  }
  protected:
  explicit CWALocationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_QRCodePlayload_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kTypeFieldNumber = 2,
    kDefaultCheckInLengthInMinutesFieldNumber = 3,
  };
  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .TraceLocationType type = 2;
  void clear_type();
  ::TraceLocationType type() const;
  void set_type(::TraceLocationType value);
  private:
  ::TraceLocationType _internal_type() const;
  void _internal_set_type(::TraceLocationType value);
  public:

  // uint32 defaultCheckInLengthInMinutes = 3;
  void clear_defaultcheckinlengthinminutes();
  ::PROTOBUF_NAMESPACE_ID::uint32 defaultcheckinlengthinminutes() const;
  void set_defaultcheckinlengthinminutes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_defaultcheckinlengthinminutes() const;
  void _internal_set_defaultcheckinlengthinminutes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CWALocationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 defaultcheckinlengthinminutes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_QRCodePlayload_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QRCodePayload

// uint32 version = 1;
inline void QRCodePayload::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QRCodePayload::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QRCodePayload::version() const {
  // @@protoc_insertion_point(field_get:QRCodePayload.version)
  return _internal_version();
}
inline void QRCodePayload::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void QRCodePayload::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:QRCodePayload.version)
}

// .TraceLocation locationData = 2;
inline bool QRCodePayload::_internal_has_locationdata() const {
  return this != internal_default_instance() && locationdata_ != nullptr;
}
inline bool QRCodePayload::has_locationdata() const {
  return _internal_has_locationdata();
}
inline void QRCodePayload::clear_locationdata() {
  if (GetArena() == nullptr && locationdata_ != nullptr) {
    delete locationdata_;
  }
  locationdata_ = nullptr;
}
inline const ::TraceLocation& QRCodePayload::_internal_locationdata() const {
  const ::TraceLocation* p = locationdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::TraceLocation&>(
      ::_TraceLocation_default_instance_);
}
inline const ::TraceLocation& QRCodePayload::locationdata() const {
  // @@protoc_insertion_point(field_get:QRCodePayload.locationData)
  return _internal_locationdata();
}
inline void QRCodePayload::unsafe_arena_set_allocated_locationdata(
    ::TraceLocation* locationdata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(locationdata_);
  }
  locationdata_ = locationdata;
  if (locationdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:QRCodePayload.locationData)
}
inline ::TraceLocation* QRCodePayload::release_locationdata() {
  
  ::TraceLocation* temp = locationdata_;
  locationdata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TraceLocation* QRCodePayload::unsafe_arena_release_locationdata() {
  // @@protoc_insertion_point(field_release:QRCodePayload.locationData)
  
  ::TraceLocation* temp = locationdata_;
  locationdata_ = nullptr;
  return temp;
}
inline ::TraceLocation* QRCodePayload::_internal_mutable_locationdata() {
  
  if (locationdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::TraceLocation>(GetArena());
    locationdata_ = p;
  }
  return locationdata_;
}
inline ::TraceLocation* QRCodePayload::mutable_locationdata() {
  // @@protoc_insertion_point(field_mutable:QRCodePayload.locationData)
  return _internal_mutable_locationdata();
}
inline void QRCodePayload::set_allocated_locationdata(::TraceLocation* locationdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete locationdata_;
  }
  if (locationdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(locationdata);
    if (message_arena != submessage_arena) {
      locationdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, locationdata, submessage_arena);
    }
    
  } else {
    
  }
  locationdata_ = locationdata;
  // @@protoc_insertion_point(field_set_allocated:QRCodePayload.locationData)
}

// .CrowdNotifierData crowdNotifierData = 3;
inline bool QRCodePayload::_internal_has_crowdnotifierdata() const {
  return this != internal_default_instance() && crowdnotifierdata_ != nullptr;
}
inline bool QRCodePayload::has_crowdnotifierdata() const {
  return _internal_has_crowdnotifierdata();
}
inline void QRCodePayload::clear_crowdnotifierdata() {
  if (GetArena() == nullptr && crowdnotifierdata_ != nullptr) {
    delete crowdnotifierdata_;
  }
  crowdnotifierdata_ = nullptr;
}
inline const ::CrowdNotifierData& QRCodePayload::_internal_crowdnotifierdata() const {
  const ::CrowdNotifierData* p = crowdnotifierdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::CrowdNotifierData&>(
      ::_CrowdNotifierData_default_instance_);
}
inline const ::CrowdNotifierData& QRCodePayload::crowdnotifierdata() const {
  // @@protoc_insertion_point(field_get:QRCodePayload.crowdNotifierData)
  return _internal_crowdnotifierdata();
}
inline void QRCodePayload::unsafe_arena_set_allocated_crowdnotifierdata(
    ::CrowdNotifierData* crowdnotifierdata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(crowdnotifierdata_);
  }
  crowdnotifierdata_ = crowdnotifierdata;
  if (crowdnotifierdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:QRCodePayload.crowdNotifierData)
}
inline ::CrowdNotifierData* QRCodePayload::release_crowdnotifierdata() {
  
  ::CrowdNotifierData* temp = crowdnotifierdata_;
  crowdnotifierdata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CrowdNotifierData* QRCodePayload::unsafe_arena_release_crowdnotifierdata() {
  // @@protoc_insertion_point(field_release:QRCodePayload.crowdNotifierData)
  
  ::CrowdNotifierData* temp = crowdnotifierdata_;
  crowdnotifierdata_ = nullptr;
  return temp;
}
inline ::CrowdNotifierData* QRCodePayload::_internal_mutable_crowdnotifierdata() {
  
  if (crowdnotifierdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::CrowdNotifierData>(GetArena());
    crowdnotifierdata_ = p;
  }
  return crowdnotifierdata_;
}
inline ::CrowdNotifierData* QRCodePayload::mutable_crowdnotifierdata() {
  // @@protoc_insertion_point(field_mutable:QRCodePayload.crowdNotifierData)
  return _internal_mutable_crowdnotifierdata();
}
inline void QRCodePayload::set_allocated_crowdnotifierdata(::CrowdNotifierData* crowdnotifierdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete crowdnotifierdata_;
  }
  if (crowdnotifierdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(crowdnotifierdata);
    if (message_arena != submessage_arena) {
      crowdnotifierdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, crowdnotifierdata, submessage_arena);
    }
    
  } else {
    
  }
  crowdnotifierdata_ = crowdnotifierdata;
  // @@protoc_insertion_point(field_set_allocated:QRCodePayload.crowdNotifierData)
}

// bytes countryData = 4;
inline void QRCodePayload::clear_countrydata() {
  countrydata_.ClearToEmpty();
}
inline const std::string& QRCodePayload::countrydata() const {
  // @@protoc_insertion_point(field_get:QRCodePayload.countryData)
  return _internal_countrydata();
}
inline void QRCodePayload::set_countrydata(const std::string& value) {
  _internal_set_countrydata(value);
  // @@protoc_insertion_point(field_set:QRCodePayload.countryData)
}
inline std::string* QRCodePayload::mutable_countrydata() {
  // @@protoc_insertion_point(field_mutable:QRCodePayload.countryData)
  return _internal_mutable_countrydata();
}
inline const std::string& QRCodePayload::_internal_countrydata() const {
  return countrydata_.Get();
}
inline void QRCodePayload::_internal_set_countrydata(const std::string& value) {
  
  countrydata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void QRCodePayload::set_countrydata(std::string&& value) {
  
  countrydata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:QRCodePayload.countryData)
}
inline void QRCodePayload::set_countrydata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  countrydata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:QRCodePayload.countryData)
}
inline void QRCodePayload::set_countrydata(const void* value,
    size_t size) {
  
  countrydata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:QRCodePayload.countryData)
}
inline std::string* QRCodePayload::_internal_mutable_countrydata() {
  
  return countrydata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* QRCodePayload::release_countrydata() {
  // @@protoc_insertion_point(field_release:QRCodePayload.countryData)
  return countrydata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QRCodePayload::set_allocated_countrydata(std::string* countrydata) {
  if (countrydata != nullptr) {
    
  } else {
    
  }
  countrydata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), countrydata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:QRCodePayload.countryData)
}

// -------------------------------------------------------------------

// TraceLocation

// uint32 version = 1;
inline void TraceLocation::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TraceLocation::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TraceLocation::version() const {
  // @@protoc_insertion_point(field_get:TraceLocation.version)
  return _internal_version();
}
inline void TraceLocation::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void TraceLocation::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:TraceLocation.version)
}

// string description = 2;
inline void TraceLocation::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& TraceLocation::description() const {
  // @@protoc_insertion_point(field_get:TraceLocation.description)
  return _internal_description();
}
inline void TraceLocation::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:TraceLocation.description)
}
inline std::string* TraceLocation::mutable_description() {
  // @@protoc_insertion_point(field_mutable:TraceLocation.description)
  return _internal_mutable_description();
}
inline const std::string& TraceLocation::_internal_description() const {
  return description_.Get();
}
inline void TraceLocation::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TraceLocation::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TraceLocation.description)
}
inline void TraceLocation::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TraceLocation.description)
}
inline void TraceLocation::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TraceLocation.description)
}
inline std::string* TraceLocation::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TraceLocation::release_description() {
  // @@protoc_insertion_point(field_release:TraceLocation.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TraceLocation::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TraceLocation.description)
}

// string address = 3;
inline void TraceLocation::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& TraceLocation::address() const {
  // @@protoc_insertion_point(field_get:TraceLocation.address)
  return _internal_address();
}
inline void TraceLocation::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:TraceLocation.address)
}
inline std::string* TraceLocation::mutable_address() {
  // @@protoc_insertion_point(field_mutable:TraceLocation.address)
  return _internal_mutable_address();
}
inline const std::string& TraceLocation::_internal_address() const {
  return address_.Get();
}
inline void TraceLocation::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TraceLocation::set_address(std::string&& value) {
  
  address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TraceLocation.address)
}
inline void TraceLocation::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:TraceLocation.address)
}
inline void TraceLocation::set_address(const char* value,
    size_t size) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TraceLocation.address)
}
inline std::string* TraceLocation::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TraceLocation::release_address() {
  // @@protoc_insertion_point(field_release:TraceLocation.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TraceLocation::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TraceLocation.address)
}

// uint64 startTimestamp = 5;
inline void TraceLocation::clear_starttimestamp() {
  starttimestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TraceLocation::_internal_starttimestamp() const {
  return starttimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TraceLocation::starttimestamp() const {
  // @@protoc_insertion_point(field_get:TraceLocation.startTimestamp)
  return _internal_starttimestamp();
}
inline void TraceLocation::_internal_set_starttimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  starttimestamp_ = value;
}
inline void TraceLocation::set_starttimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_starttimestamp(value);
  // @@protoc_insertion_point(field_set:TraceLocation.startTimestamp)
}

// uint64 endTimestamp = 6;
inline void TraceLocation::clear_endtimestamp() {
  endtimestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TraceLocation::_internal_endtimestamp() const {
  return endtimestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TraceLocation::endtimestamp() const {
  // @@protoc_insertion_point(field_get:TraceLocation.endTimestamp)
  return _internal_endtimestamp();
}
inline void TraceLocation::_internal_set_endtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  endtimestamp_ = value;
}
inline void TraceLocation::set_endtimestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_endtimestamp(value);
  // @@protoc_insertion_point(field_set:TraceLocation.endTimestamp)
}

// -------------------------------------------------------------------

// CrowdNotifierData

// uint32 version = 1;
inline void CrowdNotifierData::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CrowdNotifierData::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CrowdNotifierData::version() const {
  // @@protoc_insertion_point(field_get:CrowdNotifierData.version)
  return _internal_version();
}
inline void CrowdNotifierData::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void CrowdNotifierData::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CrowdNotifierData.version)
}

// bytes publicKey = 2;
inline void CrowdNotifierData::clear_publickey() {
  publickey_.ClearToEmpty();
}
inline const std::string& CrowdNotifierData::publickey() const {
  // @@protoc_insertion_point(field_get:CrowdNotifierData.publicKey)
  return _internal_publickey();
}
inline void CrowdNotifierData::set_publickey(const std::string& value) {
  _internal_set_publickey(value);
  // @@protoc_insertion_point(field_set:CrowdNotifierData.publicKey)
}
inline std::string* CrowdNotifierData::mutable_publickey() {
  // @@protoc_insertion_point(field_mutable:CrowdNotifierData.publicKey)
  return _internal_mutable_publickey();
}
inline const std::string& CrowdNotifierData::_internal_publickey() const {
  return publickey_.Get();
}
inline void CrowdNotifierData::_internal_set_publickey(const std::string& value) {
  
  publickey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CrowdNotifierData::set_publickey(std::string&& value) {
  
  publickey_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CrowdNotifierData.publicKey)
}
inline void CrowdNotifierData::set_publickey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  publickey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CrowdNotifierData.publicKey)
}
inline void CrowdNotifierData::set_publickey(const void* value,
    size_t size) {
  
  publickey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CrowdNotifierData.publicKey)
}
inline std::string* CrowdNotifierData::_internal_mutable_publickey() {
  
  return publickey_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CrowdNotifierData::release_publickey() {
  // @@protoc_insertion_point(field_release:CrowdNotifierData.publicKey)
  return publickey_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CrowdNotifierData::set_allocated_publickey(std::string* publickey) {
  if (publickey != nullptr) {
    
  } else {
    
  }
  publickey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), publickey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CrowdNotifierData.publicKey)
}

// bytes cryptographicSeed = 3;
inline void CrowdNotifierData::clear_cryptographicseed() {
  cryptographicseed_.ClearToEmpty();
}
inline const std::string& CrowdNotifierData::cryptographicseed() const {
  // @@protoc_insertion_point(field_get:CrowdNotifierData.cryptographicSeed)
  return _internal_cryptographicseed();
}
inline void CrowdNotifierData::set_cryptographicseed(const std::string& value) {
  _internal_set_cryptographicseed(value);
  // @@protoc_insertion_point(field_set:CrowdNotifierData.cryptographicSeed)
}
inline std::string* CrowdNotifierData::mutable_cryptographicseed() {
  // @@protoc_insertion_point(field_mutable:CrowdNotifierData.cryptographicSeed)
  return _internal_mutable_cryptographicseed();
}
inline const std::string& CrowdNotifierData::_internal_cryptographicseed() const {
  return cryptographicseed_.Get();
}
inline void CrowdNotifierData::_internal_set_cryptographicseed(const std::string& value) {
  
  cryptographicseed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CrowdNotifierData::set_cryptographicseed(std::string&& value) {
  
  cryptographicseed_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CrowdNotifierData.cryptographicSeed)
}
inline void CrowdNotifierData::set_cryptographicseed(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cryptographicseed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CrowdNotifierData.cryptographicSeed)
}
inline void CrowdNotifierData::set_cryptographicseed(const void* value,
    size_t size) {
  
  cryptographicseed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CrowdNotifierData.cryptographicSeed)
}
inline std::string* CrowdNotifierData::_internal_mutable_cryptographicseed() {
  
  return cryptographicseed_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CrowdNotifierData::release_cryptographicseed() {
  // @@protoc_insertion_point(field_release:CrowdNotifierData.cryptographicSeed)
  return cryptographicseed_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CrowdNotifierData::set_allocated_cryptographicseed(std::string* cryptographicseed) {
  if (cryptographicseed != nullptr) {
    
  } else {
    
  }
  cryptographicseed_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cryptographicseed,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CrowdNotifierData.cryptographicSeed)
}

// uint32 type = 4;
inline void CrowdNotifierData::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CrowdNotifierData::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CrowdNotifierData::type() const {
  // @@protoc_insertion_point(field_get:CrowdNotifierData.type)
  return _internal_type();
}
inline void CrowdNotifierData::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void CrowdNotifierData::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CrowdNotifierData.type)
}

// -------------------------------------------------------------------

// CWALocationData

// uint32 version = 1;
inline void CWALocationData::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CWALocationData::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CWALocationData::version() const {
  // @@protoc_insertion_point(field_get:CWALocationData.version)
  return _internal_version();
}
inline void CWALocationData::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void CWALocationData::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CWALocationData.version)
}

// .TraceLocationType type = 2;
inline void CWALocationData::clear_type() {
  type_ = 0;
}
inline ::TraceLocationType CWALocationData::_internal_type() const {
  return static_cast< ::TraceLocationType >(type_);
}
inline ::TraceLocationType CWALocationData::type() const {
  // @@protoc_insertion_point(field_get:CWALocationData.type)
  return _internal_type();
}
inline void CWALocationData::_internal_set_type(::TraceLocationType value) {
  
  type_ = value;
}
inline void CWALocationData::set_type(::TraceLocationType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CWALocationData.type)
}

// uint32 defaultCheckInLengthInMinutes = 3;
inline void CWALocationData::clear_defaultcheckinlengthinminutes() {
  defaultcheckinlengthinminutes_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CWALocationData::_internal_defaultcheckinlengthinminutes() const {
  return defaultcheckinlengthinminutes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CWALocationData::defaultcheckinlengthinminutes() const {
  // @@protoc_insertion_point(field_get:CWALocationData.defaultCheckInLengthInMinutes)
  return _internal_defaultcheckinlengthinminutes();
}
inline void CWALocationData::_internal_set_defaultcheckinlengthinminutes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  defaultcheckinlengthinminutes_ = value;
}
inline void CWALocationData::set_defaultcheckinlengthinminutes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_defaultcheckinlengthinminutes(value);
  // @@protoc_insertion_point(field_set:CWALocationData.defaultCheckInLengthInMinutes)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TraceLocationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TraceLocationType>() {
  return ::TraceLocationType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_QRCodePlayload_2eproto
